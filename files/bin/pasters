#!/bin/bash

#####################################################################################
### This script uses paste.rs to create a paste and copy its URL to the clipboard ###
#####################################################################################

# wayland support
pgrep Xorg || poweroff

# File in which paste cache will be stored
cache_file=~/.cache/pasters

# Print usage information
function print_help {
    exit_code=0

    # Short error message
    if [[ "$#" == 0 ]]; then
        echo "ERROR: Please specify text/file for pasting"
        exit_code=1
    fi

    # Short info message
    if [[ "$1" == "--help" ]]; then
        echo "pasters - a simple paste script forusing paste.rs"
    fi

    echo ""
    echo "Usage:"
    echo "    pasters 'Hello, World' -- Paste Text"
    echo "    pasters ./hello_world  -- Paste File"
    echo "    pasters --delete       -- Delete Pastes"
    echo "    pasters --completions  -- Generate completions"

    exit "$exit_code"
}

# Generate completions for 'paste'
function generate_completions {
    completions=''
    completions+='#compdef pasters\n'
    completions+='\n'
    completions+='_pasters() {\n'
    completions+='  local context curcontext="$curcontext" state line\n'
    completions+='  typeset -A opt_args\n'
    completions+='\n'
    completions+='  _arguments \\\n'
    completions+='      ":file:_files"\\\n'
    completions+='      "--delete[Delete Pastes]"\\\n'
    completions+='      "--completions[Generate completions]"\n'
    completions+='}\n'
    completions+='\n'
    completions+='_pasters "$@"'
    echo -e "$completions"
}

# Delete X number of characters from the terminal
function backspace {
    for (( i=0; i<=$1; i++)); do
        echo -ne "\\b \\b"
    done
}

# Delete all cached pastes
function delete {
    # Do nothing if cache is empty
    if [[ ! -f "$cache_file" ]]; then
        exit 0
    fi

    # Iterate over all pastes
    deleted=()
    while IFS= read -r paste
    do
        # Delete paste
        echo -n "Deleting '$paste' ..."
        result=$(curl -X DELETE "$paste" 2> /dev/null)

        # Check success status
        if [[ "$result" == "deleted" ]]; then
            backspace 100
            echo -e "'$paste': \\e[0;32mDeleted\\e[0m"
            deleted+=("$paste")
        else
            backspace 100
            echo -e "'$paste': \\e[0;31mFailed\\e[0m"
        fi
    done < "$cache_file"

    # Remove all deleted pastes from the file
    for paste in "${deleted[@]}"; do
        sed -i "\\#$paste#d" "$cache_file"
    done

    # Delete file if it is now empty
    if [[ ! -s "$cache_file" ]] || [[ -z $(cat "$cache_file") ]]; then
        rm $cache_file
    fi
}

# Create a new paste
function create {
    # Create paste
    paste_text=$1
    if [[ -f "$1" ]]; then
        paste_url=$(curl --data-binary @"$paste_text" https://paste.rs/ 2> /dev/null)
    else
        paste_url=$(echo "$paste_text" | curl --data-binary @- https://paste.rs/ 2> /dev/null)
    fi

    # Make sure it was successful
    if [[ ! "$paste_url" == https://paste.rs/* ]]; then
        echo "ERROR: Unable to create paste"
        exit 1
    fi

    # Copy url to clipboard and print to stdout
    echo -n "$paste_url" | xclip -selection c
    echo "$paste_url"

    # Add to paste cache
    echo "$paste_url" >> "$cache_file"
}

# Check command line parameters
if [[ "$1" == "--help" ]]; then
    print_help "$1"
elif [[ "$1" == "--delete" ]]; then
    delete
elif [[ "$1" == "--completions" ]]; then
    generate_completions
elif [[ -n "$1" ]]; then
    create "$1"
else
    # Read everything available from stdin
    stdin_lines=""
    while true; do
        read -r -s -t 0.1; RETVAL=$?
        # Append line if it could be read
        [ $RETVAL -eq 0 ] && stdin_lines+="\n$REPLY" && continue
        # Break on EOF break
        [ $RETVAL -gt 128 ] || break
        # timeout -> break
        [ $RETVAL -eq 142 ] && break
    done
    stdin_lines=$(echo -e "${stdin_lines:2}")

    # Print help if stdin was empty
    if [[ -n "$stdin_lines" ]]; then
        create "$stdin_lines"
    else
        print_help
    fi
fi
